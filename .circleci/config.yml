version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy_enviroment:
    steps:
      - run: 
          name: destroy backend enviroment
          command: aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - run: 
          name: destroy frontend enviroment
          command: aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  install_tar_utility:
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable

            SUCCESS=$(curl https://kvdb.io/QN3gApBMSCVoh4iZg7AFpV/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ./backend
              npm install
              npm run migrations:revert
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
     


jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm run build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm run build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm audit fix --audit-level=critical --force
      - run: cd frontend && npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: basic_success_1
          channel: C03DAJYL3SM
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: C03DAJYL3SM

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm audit fix --audit-level=critical --force
      # - run: cd backend && npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: basic_success_1
          channel: C03DAJYL3SM
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: C03DAJYL3SM

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_utility
      - run:
          name: create backend infrastructure using cloud formation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: create frontend infrastructure using cloud formation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run: echo "[web]" > ./.circleci/ansible/inventory.txt
      - run:
          name: populate ansible inventory file
          command: |
              aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
      - run: cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./
          paths:
            - "./.circleci/ansible/inventory.txt"
      - destroy_enviroment

  configure-infrastructure:
    docker:
      - image: python:3.9.13-alpine3.16
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: ["a8:db:51:9a:82:49:74:d7:1b:35:99:f6:b5:5a:18:3f"] 
      - attach_workspace:
          at: ./
      - run:
          name: install ansible
          command: apk add --update ansible
      - run:
          name: run ansible playbook
          command: cd ./.circleci/ansible && ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
              cd backend && npm install
              cd backend && npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ./backend/migrations_dump.txt
              then
                  curl https://kvdb.io/QN3gApBMSCVoh4iZg7AFpV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: apk install -y nodejs
      - install_tar_utility
      - attach_workspace:
          at: ./
      - run: export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
      - run: export API_URL="http://${BACKEND_IP}:3030"
      - run: echo "API_URL = ${API_URL}"
      - run: echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run: cat frontend/.env

      - run: cd backend && npm install
      - run: cd backend && npm run build

      - run: tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run: aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy_enviroment
      - revert-migrations

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: ["a8:db:51:9a:82:49:74:d7:1b:35:99:f6:b5:5a:18:3f"] 
      - run: curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
      - run: yum -y install nodejs
      - run: python --version
      - install_tar_utility
      # - attach_workspace:
      #     at: ./
      # - run:
      #     name: install ansible
      #     command: apk add --update ansible

      # - run: cd backend && npm i
      # - run: cd backend && npm run build
      # # Zip the directory
      # - run: tar -C backend -czvf artifact.tar.gz .
      # - run: echo "Contents  of the inventory.txt file is -------"
      # - run: cd .circleci/ansible && cat inventory.txt
      # - run:
      #     name: run ansible playbook
      #     command: cd ./.circleci/ansible && ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy_enviroment
      - revert-migrations


workflows:
  build_and_test:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      #     context: slack
      # - scan-frontend:
      #     context: slack
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - deploy-frontend:
      #     requires: [configure-infrastructure]
      - deploy-backend

