version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy_enviroment:
    steps:
      - run: 
          name: destroy backend enviroment
          command: aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - run: 
          name: destroy frontend enviroment
          command: aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm run build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm run build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm audit fix --audit-level=critical --force
      - run: cd frontend && npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: basic_success_1
          channel: C03DAJYL3SM
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: C03DAJYL3SM

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm audit fix --audit-level=critical --force
      # - run: cd backend && npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: basic_success_1
          channel: C03DAJYL3SM
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: C03DAJYL3SM

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: create backend infrastructure using cloud formation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: create frontend infrastructure using cloud formation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run: echo "[web]" > ./.circleci/ansible/inventory.txt
      - run:
          name: populate ansible inventory file
          command: |
              aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./
          paths:
            - "./.circleci/ansible/inventory.txt"
      - destroy_enviroment


workflows:
  build_and_test:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack
      - scan-frontend:
          context: slack
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]

