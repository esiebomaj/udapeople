version: 2.1

orbs:
  slack: circleci/slack@4.10.1

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'

commands:
  destroy_enviroment:
    steps:
      - run:
          name: destroy enviroments
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  install_tar_utility:
    steps:
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable

            SUCCESS=$(curl https://kvdb.io/QN3gApBMSCVoh4iZg7AFpV/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ./backend
              npm install
              npm run migrations:revert
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm run build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm run build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install
      - run: cd frontend && npm audit fix --audit-level=critical --force
      - run: cd frontend && npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: basic_success_1
          channel: C03DAJYL3SM
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: C03DAJYL3SM

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm install
      - run: cd backend && npm audit fix --audit-level=critical --force
      # - run: cd backend && npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: basic_success_1
          channel: C03DAJYL3SM
      - slack/notify:
          event: fail
          template: basic_fail_1
          channel: C03DAJYL3SM

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_tar_utility
      - run:
          name: create backend infrastructure using cloud formation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: create frontend infrastructure using cloud formation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run: echo "[web]" > ./.circleci/ansible/inventory.txt
      - run:
          name: populate ansible inventory file
          command: |
            aws ec2 describe-instances --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ./.circleci/ansible/inventory.txt
      - run: cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./
          paths:
            - "./.circleci/ansible/inventory.txt"
      - destroy_enviroment

  configure-infrastructure:
    docker:
      - image: python:3.9.13-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a8:db:51:9a:82:49:74:d7:1b:35:99:f6:b5:5a:18:3f"]
      - attach_workspace:
          at: ./
      - run:
          name: install ansible
          command: apk add --update ansible
      - run:
          name: run ansible playbook
          command: cd ./.circleci/ansible && ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend && npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            if grep -q "has been executed successfully." ./backend/migrations_dump.txt
            then
                curl https://kvdb.io/QN3gApBMSCVoh4iZg7AFpV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    environment:
      TERM: xterm
    steps:
      - checkout
      - run: echo $TERM
      - run: curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
      - run: yum update -y
      - run: yum -y install nodejs
      - install_tar_utility
      - attach_workspace:
          at: ./
      - run: aws ec2 describe-instances --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text
      - run: echo "export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> $BASH_ENV; source $BASH_ENV
      - run: echo $BACKEND_IP
      - run: echo "export API_URL="http://${BACKEND_IP}:3030"" >> $BASH_ENV; source $BASH_ENV
      - run: echo "API_URL = ${API_URL}"
      - run: echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run: cat frontend/.env
      - persist_to_workspace:
          root: ./
          paths:
            - "./frontend/.env"
      - run: cd frontend && npm install
      - run: cd frontend && npm run build && ls

      - run: cd frontend && tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run: cd frontend && aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy_enviroment
      - revert-migrations

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a8:db:51:9a:82:49:74:d7:1b:35:99:f6:b5:5a:18:3f"]
      - run: curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
      - run: yum update -y
      - run: yum -y install nodejs
      - run: yum -y install python3
      - run: python --version
      - install_tar_utility
      - attach_workspace:
          at: ./
      - run:
          name: install ansible
          command: amazon-linux-extras install ansible2 -y
      - run: ansible --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy_enviroment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli nodejs npm
      - run:
          name: Backend smoke test
          command: |
            # export BACKEND_IP=$(tail ~/project/.circleci/ansible/inventory.txt)
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"; then return 0; else return 0; fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo $URL
            if curl ${URL} | grep "Welcome"; then return 0; else return 1; fi
      - revert-migrations
      - destroy_enviroment

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople

      - revert-migrations
      - destroy_enviroment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove stacks
          command: |
            echo <<pipeline.parameters.workflow_id>>
            export OldWorkflowID=<<pipeline.parameters.workflow_id>>
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "----------cleaning up stacks------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  build_and_test:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack
      - scan-frontend:
          context: slack
          requires: [build-frontend]

        # deployment jobs only run on master
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only:
                - master
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only:
                - master
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only:
                - master
      # - cleanup:
      #     requires: [cloudfront-update]
      #     filters:
      #       branches:
      #         only:
      #           - master
